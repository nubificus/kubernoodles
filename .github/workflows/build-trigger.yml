name: üçú Build/publish go runners

on:
  push:
    branches: ["feat_nbfc"]
    paths:
      - 'images/*.Dockerfile'
            #- 'images/rootless-ubuntu-jammy-go.Dockerfile'
            #- 'images/rootless-ubuntu-numbat-go.Dockerfile'

  workflow_dispatch: # build on demand
  #schedule:
  #  - cron: "43 6 * * 0" # build every Sunday at 6:43 AM UTC

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  get-changed-files:
    runs-on: ubuntu-latest
    outputs:
      files_go: ${{ steps.replace_files_go.outputs.go_files_new }}
      files_gcc: ${{ steps.replace_files_gcc.outputs.gcc_files_new }}
      files_rust: ${{ steps.replace_files_rust.outputs.rust_files_new }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Get Changed Files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: 'json'
          filters: |
            go:
              - 'images/rootless-ubuntu-*-go.Dockerfile'
            gcc:
              - 'images/rootless-ubuntu-*-gcc.Dockerfile'
            rust:
              - 'images/rootless-ubuntu-*-rust.Dockerfile'

      - name: Show Changed Files
        run: |
          echo "Files in go: ${{ steps.filter.outputs.go_files }}"
          echo "Files in gcc: ${{ steps.filter.outputs.gcc_files }}"
          echo "Files in gcc: ${{ steps.filter.outputs.rust_files }}"
          echo "Files changed: ${{ steps.filter.outputs.changes }}"

      - name: Replace file paths in go_files
        id: replace_files_go
        run: |
          # Get the changed Dockerfiles from the paths-filter output
          FILES="${{ steps.filter.outputs.go_files }}"

          # Remove the brackets and split the string by commas
          FILES_ARRAY=($(echo "$FILES" | sed 's/[][]//g' | tr ',' '\n'))

          # Initialize a variable to store the new names
          NEW_FILE_NAMES=()

          # Loop through the files and replace the paths
          for FILE_PATH in "${FILES_ARRAY[@]}"; do
            echo "Processing file: $FILE_PATH"
            # Remove 'images/' and '.Dockerfile' from the filename
            NEW_NAME=$(basename "$FILE_PATH" .Dockerfile | sed 's/^images\///')
            # Append the new name to the array
            NEW_FILE_NAMES+=("\"$NEW_NAME\"")
          done

          # Join the array into a JSON array format
          JSON_OUTPUT=$(printf "[%s]" "$(IFS=,; echo "${NEW_FILE_NAMES[*]}")")

          # Debugging output
          echo "Final JSON Output: $JSON_OUTPUT"

          # Set the output for the replaced names in JSON format
          echo "::set-output name=go_files_new::$JSON_OUTPUT"

      - name: Replace file paths in gcc_files
        id: replace_files_gcc
        run: |
          # Get the changed Dockerfiles from the paths-filter output
          FILES="${{ steps.filter.outputs.gcc_files }}"

          # Remove the brackets and split the string by commas
          FILES_ARRAY=($(echo "$FILES" | sed 's/[][]//g' | tr ',' '\n'))

          # Initialize a variable to store the new names
          NEW_FILE_NAMES=()

          # Loop through the files and replace the paths
          for FILE_PATH in "${FILES_ARRAY[@]}"; do
            echo "Processing file: $FILE_PATH"
            # Remove 'images/' and '.Dockerfile' from the filename
            NEW_NAME=$(basename "$FILE_PATH" .Dockerfile | sed 's/^images\///')
            # Append the new name to the array
            NEW_FILE_NAMES+=("\"$NEW_NAME\"")
          done

          # Join the array into a JSON array format
          JSON_OUTPUT=$(printf "[%s]" "$(IFS=,; echo "${NEW_FILE_NAMES[*]}")")

          # Debugging output
          echo "Final JSON Output: $JSON_OUTPUT"

          # Set the output for the replaced names in JSON format
          echo "::set-output name=gcc_files_new::$JSON_OUTPUT"

      - name: Replace file paths in rust_files
        id: replace_files_rust
        run: |
          # Get the changed Dockerfiles from the paths-filter output
          FILES="${{ steps.filter.outputs.rust_files }}"

          # Remove the brackets and split the string by commas
          FILES_ARRAY=($(echo "$FILES" | sed 's/[][]//g' | tr ',' '\n'))

          # Initialize a variable to store the new names
          NEW_FILE_NAMES=()

          # Loop through the files and replace the paths
          for FILE_PATH in "${FILES_ARRAY[@]}"; do
            echo "Processing file: $FILE_PATH"
            # Remove 'images/' and '.Dockerfile' from the filename
            NEW_NAME=$(basename "$FILE_PATH" .Dockerfile | sed 's/^images\///')
            # Append the new name to the array
            NEW_FILE_NAMES+=("\"$NEW_NAME\"")
          done

          # Join the array into a JSON array format
          JSON_OUTPUT=$(printf "[%s]" "$(IFS=,; echo "${NEW_FILE_NAMES[*]}")")

          # Debugging output
          echo "Final JSON Output: $JSON_OUTPUT"

          # Set the output for the replaced names in JSON format
          echo "::set-output name=rust_files_new::$JSON_OUTPUT"

      - name: Use replaced filenames
        run: |
          echo "Processed filenames: ${{ steps.replace_files_go.outputs.go_files_new}}"
          echo "Processed filenames: ${{ steps.replace_files_gcc.outputs.gcc_files_new}}"
          echo "Processed filenames: ${{ steps.replace_files_gcc.outputs.rust_files_new}}"


  build-dockerfiles-go:
    needs: [get-changed-files]
    name: Go
    if: ${{ needs.get-changed-files.outputs.files_go != '' }}
    uses: ./.github/workflows/build-latest-go.yml
    secrets: inherit
    with:
      runner: '["gcc", "lite", "2204", "dind"]'
      runner-archs: '["amd64", "aarch64"]'
      dockerfiles: ${{ needs.get-changed-files.outputs.files_go }}

  build-dockerfiles-rust:
    needs: [get-changed-files]
    name: Rust
    if: ${{ needs.get-changed-files.outputs.files_rust != '' }}
    uses: ./.github/workflows/build-latest-go.yml
    secrets: inherit
    with:
      runner: '["gcc", "lite", "2204", "dind"]'
      runner-archs: '["amd64", "aarch64", "armv7l"]'
      dockerfiles: ${{ needs.get-changed-files.outputs.files_rust }}

  build-dockerfiles-gcc:
    needs: [get-changed-files]
    name: GCC
    if: ${{ needs.get-changed-files.outputs.files_gcc != '' }}
    uses: ./.github/workflows/build-latest-go.yml
    secrets: inherit
    with:
      runner: '["gcc", "lite", "2204", "dind"]'
      runner-archs: '["amd64", "aarch64", "armv7l"]'
      dockerfiles: ${{ needs.get-changed-files.outputs.files_gcc }}

